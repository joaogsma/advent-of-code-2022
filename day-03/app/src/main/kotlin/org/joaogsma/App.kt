/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.joaogsma

fun readResource(name: String): List<String> {
    when (val inputStream = object {}::class.java.getResourceAsStream(name)) {
        null -> throw IllegalArgumentException("File not found")
        else -> return inputStream.bufferedReader().readLines()
    }
}

fun getFilename(input: String): String {
    return when(input) {
        "example" -> "example.txt"
        "input" -> "input.txt"
        else -> throw IllegalArgumentException("Unknown input $input")
    }
}

fun priorityOf(c: Char): Int {
    return when(c) {
        in 'a'..'z' -> c - 'a' + 1
        in 'A'..'Z' -> c - 'A' + 27
        else -> throw IllegalArgumentException("Unknown input $c")
    }
}


fun runProblem1(filename: String): Int {
    val lines: List<String> = readResource(filename)
    return lines
        .map { line ->
            val middleIndex: Int = line.length / 2
            val setA: Set<Char> = line.subSequence(0, middleIndex).toSet()
            val setB: Set<Char> = line.subSequence(middleIndex, line.length).toSet()
            setA.intersect(setB).first()
        }
        .sumOf { priorityOf(it) }
}

fun runProblem2(filename: String): Int {
    val lines: List<String> = readResource(filename)
    return lines
        .windowed(3, 3)
        .map { window -> window.map { it.toSet() }.reduce(Set<Char>::intersect).first() }
        .sumOf { priorityOf(it) }
}

fun main(args: Array<String>) {
    val filename: String = getFilename(args[0])
    val result: Int = when(val variation = args[1]) {
        "1" -> runProblem1(filename)
        "2" -> runProblem2(filename)
        else -> throw IllegalArgumentException("Unknown problem variation $variation")
    }
    println("Result is $result")
}

